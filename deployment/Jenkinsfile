pipeline {
    agent any
    
    environment {
        // Define credentials ID that you'll set up in Jenkins
        DOCKERHUB_CREDENTIALS = credentials('DockerHub_creds')
        
        // Define your DockerHub username and repository names
        DOCKERHUB_USERNAME = 'idanpersi'
        BACKEND_REPO = 'gitops_backend'
        FRONTEND_REPO = 'gitops_frontend'
        
        // Define image tags using the build number for versioning
        TAG = "${BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                // This will clone your GitHub repository
                checkout scm
            }
        }
        
         stage('Run Tests') {
            parallel {
                stage('Backend Tests') {
                    steps {
                        dir('backend') {
                            script {
                                // Using docker.build() instead of raw docker commands
                                def testImage = docker.build("backend-test:${env.BUILD_NUMBER}")
                                testImage.inside {
                                    sh 'npm test'  // Adjust this to your actual test command
                                }
                            }
                        }
                    }
                }
                
                stage('Frontend Tests') {
                    steps {
                        dir('frontend') {
                            script {
                                def testImage = docker.build("frontend-test:${env.BUILD_NUMBER}")
                                testImage.inside {
                                    sh 'npm test'  // Adjust this to your actual test command
                                }
                            }
                        }
                    }
                }
            }
        }
        
        stage('Build and Push Images') {
            steps {
                script {
                    // Log in to DockerHub using the plugin's built-in functionality
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-credentials') {
                        // Build and push backend
                        dir('backend') {
                            def backendImage = docker.build("${DOCKERHUB_USERNAME}/${BACKEND_REPO}:${TAG}")
                            backendImage.push()
                            backendImage.push('latest')
                        }
                        
                        // Build and push frontend
                        dir('frontend') {
                            def frontendImage = docker.build("${DOCKERHUB_USERNAME}/${FRONTEND_REPO}:${TAG}")
                            frontendImage.push()
                            frontendImage.push('latest')
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            // Clean up images
            script {
                sh """
                    docker rmi backend-test:${BUILD_NUMBER} || true
                    docker rmi frontend-test:${BUILD_NUMBER} || true
                    docker rmi ${DOCKERHUB_USERNAME}/${BACKEND_REPO}:${TAG} || true
                    docker rmi ${DOCKERHUB_USERNAME}/${BACKEND_REPO}:latest || true
                    docker rmi ${DOCKERHUB_USERNAME}/${FRONTEND_REPO}:${TAG} || true
                    docker rmi ${DOCKERHUB_USERNAME}/${FRONTEND_REPO}:latest || true
                """
            }
        }
    }
}
